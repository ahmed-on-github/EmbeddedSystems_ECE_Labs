
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6c  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000823  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065f  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ab  00000000  00000000  00002861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  64:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <button_init>:
#include "button.h"

void button_init(uint8_t port , uint8_t pin){
    DIO_init(port,pin,IN);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_init>
  72:	08 95       	ret

00000074 <button_read>:
}
uint8_t button_read(uint8_t port , uint8_t pin){
    return DIO_read(port,pin);
  74:	0e 94 48 01 	call	0x290	; 0x290 <DIO_read>
}
  78:	08 95       	ret

0000007a <DIO_init>:
#include "dio.h"

// functions' Definitions
void DIO_init (uint8_t port , uint8_t pin , uint8_t dir){
    switch(port){
  7a:	82 34       	cpi	r24, 0x42	; 66
  7c:	31 f1       	breq	.+76     	; 0xca <DIO_init+0x50>
  7e:	18 f4       	brcc	.+6      	; 0x86 <DIO_init+0xc>
  80:	81 34       	cpi	r24, 0x41	; 65
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_init+0x18>
  84:	08 95       	ret
  86:	83 34       	cpi	r24, 0x43	; 67
  88:	e1 f1       	breq	.+120    	; 0x102 <DIO_init+0x88>
  8a:	84 34       	cpi	r24, 0x44	; 68
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_init+0x16>
  8e:	54 c0       	rjmp	.+168    	; 0x138 <DIO_init+0xbe>
  90:	08 95       	ret
        case PORT_A:
             if(dir==IN)
  92:	41 11       	cpse	r20, r1
  94:	0c c0       	rjmp	.+24     	; 0xae <DIO_init+0x34>
                CLR_BIT
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_init+0x28>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_init+0x24>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
				(DDRA,pin);
             else if(dir==OUT)
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <DIO_init+0x3a>
  b2:	5c c0       	rjmp	.+184    	; 0x16c <DIO_init+0xf2>
                SET_BIT(DDRA,pin);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_init+0x46>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_init+0x42>
  c4:	82 2b       	or	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
             //else
                // Undefined direction Error handler
        break;
        case PORT_B:
            if(dir==IN)
  ca:	41 11       	cpse	r20, r1
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <DIO_init+0x6c>
                CLR_BIT(DDRB,pin);
  ce:	27 b3       	in	r18, 0x17	; 23
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_init+0x60>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_init+0x5c>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
             else if(dir==OUT)
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <DIO_init+0x72>
  ea:	40 c0       	rjmp	.+128    	; 0x16c <DIO_init+0xf2>
                SET_BIT(DDRB,pin);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_init+0x7e>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_init+0x7a>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
             //else
                // Undefined direction Error handler

        break;
        case PORT_C:
            if(dir==IN)
 102:	41 11       	cpse	r20, r1
 104:	0c c0       	rjmp	.+24     	; 0x11e <DIO_init+0xa4>
                CLR_BIT(DDRC,pin);
 106:	24 b3       	in	r18, 0x14	; 20
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_init+0x98>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_init+0x94>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
             else if(dir==OUT)
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	29 f5       	brne	.+74     	; 0x16c <DIO_init+0xf2>
                SET_BIT(DDRC,pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_init+0xb4>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_init+0xb0>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 136:	08 95       	ret
             //else
                // Undefined direction Error handler

        break;
        case PORT_D:
            if(dir==IN)
 138:	41 11       	cpse	r20, r1
 13a:	0c c0       	rjmp	.+24     	; 0x154 <DIO_init+0xda>
                CLR_BIT(DDRD,pin);
 13c:	21 b3       	in	r18, 0x11	; 17
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_init+0xce>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_init+0xca>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
             else if(dir==OUT)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	51 f4       	brne	.+20     	; 0x16c <DIO_init+0xf2>
                SET_BIT(DDRD,pin);
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_init+0xea>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_init+0xe6>
 168:	82 2b       	or	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_write>:
            // Undefined port error handler
        break;
    }
}
void DIO_write (uint8_t port , uint8_t pin , uint8_t value){
        switch(port){
 16e:	82 34       	cpi	r24, 0x42	; 66
 170:	69 f1       	breq	.+90     	; 0x1cc <DIO_write+0x5e>
 172:	18 f4       	brcc	.+6      	; 0x17a <DIO_write+0xc>
 174:	81 34       	cpi	r24, 0x41	; 65
 176:	41 f0       	breq	.+16     	; 0x188 <DIO_write+0x1a>
 178:	08 95       	ret
 17a:	83 34       	cpi	r24, 0x43	; 67
 17c:	09 f4       	brne	.+2      	; 0x180 <DIO_write+0x12>
 17e:	48 c0       	rjmp	.+144    	; 0x210 <DIO_write+0xa2>
 180:	84 34       	cpi	r24, 0x44	; 68
 182:	09 f4       	brne	.+2      	; 0x186 <DIO_write+0x18>
 184:	65 c0       	rjmp	.+202    	; 0x250 <DIO_write+0xe2>
 186:	08 95       	ret
        case PORT_A:
            if( BIT_VAL(DDRA,pin) ){
 188:	8a b3       	in	r24, 0x1a	; 26
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	06 2e       	mov	r0, r22
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_write+0x28>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_write+0x24>
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	82 23       	and	r24, r18
 19e:	93 23       	and	r25, r19
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_write+0x38>
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_write+0x34>
 1aa:	89 2b       	or	r24, r25
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <DIO_write+0x42>
 1ae:	6f c0       	rjmp	.+222    	; 0x28e <DIO_write+0x120>
                if(value==LOW)
 1b0:	41 11       	cpse	r20, r1
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <DIO_write+0x50>
                    CLR_BIT(PORTA,pin);
 1b4:	8b b3       	in	r24, 0x1b	; 27
 1b6:	20 95       	com	r18
 1b8:	28 23       	and	r18, r24
 1ba:	2b bb       	out	0x1b, r18	; 27
 1bc:	08 95       	ret
                else if(value==HIGH)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <DIO_write+0x56>
 1c2:	65 c0       	rjmp	.+202    	; 0x28e <DIO_write+0x120>
                    SET_BIT(PORTA,pin);
 1c4:	8b b3       	in	r24, 0x1b	; 27
 1c6:	28 2b       	or	r18, r24
 1c8:	2b bb       	out	0x1b, r18	; 27
 1ca:	08 95       	ret
             }
             //else
                // pin is not an output pin
        break;
        case PORT_B:
            if( BIT_VAL(DDRB,pin) ){
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	06 2e       	mov	r0, r22
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_write+0x6c>
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_write+0x68>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	82 23       	and	r24, r18
 1e2:	93 23       	and	r25, r19
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_write+0x7c>
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_write+0x78>
 1ee:	89 2b       	or	r24, r25
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_write+0x86>
 1f2:	4d c0       	rjmp	.+154    	; 0x28e <DIO_write+0x120>
                if(value==LOW)
 1f4:	41 11       	cpse	r20, r1
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <DIO_write+0x94>
                    CLR_BIT(PORTB,pin);
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	20 95       	com	r18
 1fc:	28 23       	and	r18, r24
 1fe:	28 bb       	out	0x18, r18	; 24
 200:	08 95       	ret
                 else if(value==HIGH)
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	09 f0       	breq	.+2      	; 0x208 <DIO_write+0x9a>
 206:	43 c0       	rjmp	.+134    	; 0x28e <DIO_write+0x120>
                    SET_BIT(PORTB,pin);
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	28 2b       	or	r18, r24
 20c:	28 bb       	out	0x18, r18	; 24
 20e:	08 95       	ret
             }
            //else
                // pin is not an output pin
        break;
        case PORT_C:
            if( BIT_VAL(DDRC,pin) ){
 210:	84 b3       	in	r24, 0x14	; 20
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	06 2e       	mov	r0, r22
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_write+0xb0>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_write+0xac>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	82 23       	and	r24, r18
 226:	93 23       	and	r25, r19
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_write+0xc0>
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_write+0xbc>
 232:	89 2b       	or	r24, r25
 234:	61 f1       	breq	.+88     	; 0x28e <DIO_write+0x120>
                if(value==LOW)
 236:	41 11       	cpse	r20, r1
 238:	05 c0       	rjmp	.+10     	; 0x244 <DIO_write+0xd6>
                    CLR_BIT(PORTC,pin);
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	20 95       	com	r18
 23e:	28 23       	and	r18, r24
 240:	25 bb       	out	0x15, r18	; 21
 242:	08 95       	ret
                 else if(value==HIGH)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	19 f5       	brne	.+70     	; 0x28e <DIO_write+0x120>
                    SET_BIT(PORTC,pin);
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	28 2b       	or	r18, r24
 24c:	25 bb       	out	0x15, r18	; 21
 24e:	08 95       	ret
            //else
                // pin is not an output pin

        break;
        case PORT_D:
            if( BIT_VAL(DDRC,pin) ){
 250:	84 b3       	in	r24, 0x14	; 20
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	06 2e       	mov	r0, r22
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_write+0xf0>
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_write+0xec>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	82 23       	and	r24, r18
 266:	93 23       	and	r25, r19
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_write+0x100>
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_write+0xfc>
 272:	89 2b       	or	r24, r25
 274:	61 f0       	breq	.+24     	; 0x28e <DIO_write+0x120>
                if(value==LOW)
 276:	41 11       	cpse	r20, r1
 278:	05 c0       	rjmp	.+10     	; 0x284 <DIO_write+0x116>
                    CLR_BIT(PORTD,pin);
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	20 95       	com	r18
 27e:	28 23       	and	r18, r24
 280:	22 bb       	out	0x12, r18	; 18
 282:	08 95       	ret
                 else if(value==HIGH)
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	19 f4       	brne	.+6      	; 0x28e <DIO_write+0x120>
                    SET_BIT(PORTD,pin);
 288:	82 b3       	in	r24, 0x12	; 18
 28a:	28 2b       	or	r18, r24
 28c:	22 bb       	out	0x12, r18	; 18
 28e:	08 95       	ret

00000290 <DIO_read>:
        break;
    }

}
uint8_t DIO_read (uint8_t port , uint8_t pin){
    switch(port){
 290:	82 34       	cpi	r24, 0x42	; 66
 292:	e9 f0       	breq	.+58     	; 0x2ce <DIO_read+0x3e>
 294:	18 f4       	brcc	.+6      	; 0x29c <DIO_read+0xc>
 296:	81 34       	cpi	r24, 0x41	; 65
 298:	31 f0       	breq	.+12     	; 0x2a6 <DIO_read+0x16>
 29a:	55 c0       	rjmp	.+170    	; 0x346 <DIO_read+0xb6>
 29c:	83 34       	cpi	r24, 0x43	; 67
 29e:	59 f1       	breq	.+86     	; 0x2f6 <DIO_read+0x66>
 2a0:	84 34       	cpi	r24, 0x44	; 68
 2a2:	e9 f1       	breq	.+122    	; 0x31e <DIO_read+0x8e>
 2a4:	50 c0       	rjmp	.+160    	; 0x346 <DIO_read+0xb6>
        case PORT_A:
             return BIT_VAL(PINA,pin);
 2a6:	49 b3       	in	r20, 0x19	; 25
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9c 01       	movw	r18, r24
 2ae:	06 2e       	mov	r0, r22
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_read+0x26>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_read+0x22>
 2ba:	84 2f       	mov	r24, r20
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	82 23       	and	r24, r18
 2c0:	93 23       	and	r25, r19
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_read+0x38>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_read+0x34>
 2cc:	08 95       	ret
        case PORT_B:
            return BIT_VAL(PINB,pin);
 2ce:	46 b3       	in	r20, 0x16	; 22
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9c 01       	movw	r18, r24
 2d6:	06 2e       	mov	r0, r22
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_read+0x4e>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_read+0x4a>
 2e2:	84 2f       	mov	r24, r20
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	82 23       	and	r24, r18
 2e8:	93 23       	and	r25, r19
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_read+0x60>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_read+0x5c>
 2f4:	08 95       	ret
        case PORT_C:
            return  BIT_VAL(PINC,pin);
 2f6:	43 b3       	in	r20, 0x13	; 19
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9c 01       	movw	r18, r24
 2fe:	06 2e       	mov	r0, r22
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_read+0x76>
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_read+0x72>
 30a:	84 2f       	mov	r24, r20
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	82 23       	and	r24, r18
 310:	93 23       	and	r25, r19
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_read+0x88>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_read+0x84>
 31c:	08 95       	ret
        case PORT_D:
            return  BIT_VAL(PIND,pin);
 31e:	40 b3       	in	r20, 0x10	; 16
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	06 2e       	mov	r0, r22
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_read+0x9e>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_read+0x9a>
 332:	84 2f       	mov	r24, r20
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	82 23       	and	r24, r18
 338:	93 23       	and	r25, r19
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_read+0xb0>
 33c:	95 95       	asr	r25
 33e:	87 95       	ror	r24
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_read+0xac>
 344:	08 95       	ret
        default:
            return -1; // Undefined port error handler
 346:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
 348:	08 95       	ret

0000034a <init>:
 *  Author: user
 */ 
#include "header.h"

void init(void){
	button_init('A',BUTTON1);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
	button_init('A',BUTTON2);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
	button_init('A',BUTTON3);
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e4       	ldi	r24, 0x41	; 65
 35e:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
	
	LED_init('B',LED1);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	82 e4       	ldi	r24, 0x42	; 66
 366:	0e 94 be 01 	call	0x37c	; 0x37c <LED_init>
	LED_init('B',LED2);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	82 e4       	ldi	r24, 0x42	; 66
 36e:	0e 94 be 01 	call	0x37c	; 0x37c <LED_init>
	LED_init('B',LED3);
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	82 e4       	ldi	r24, 0x42	; 66
 376:	0e 94 be 01 	call	0x37c	; 0x37c <LED_init>
 37a:	08 95       	ret

0000037c <LED_init>:
    //CLRB(port , pin);
    DIO_write(port,pin,LOW);
}
void LED_toggle(uint8_t port , uint8_t pin ){
    //TOGGLEB(port , pin);
    DIO_toggle(port,pin);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_init>
 382:	08 95       	ret

00000384 <LED_on>:
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_write>
 38a:	08 95       	ret

0000038c <LED_off>:
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_write>
 392:	08 95       	ret

00000394 <LED_state>:
}
uint8_t LED_state(uint8_t port , uint8_t pin){
    //return BITVAL(port,pin);
    return DIO_read(port,pin);
 394:	0e 94 48 01 	call	0x290	; 0x290 <DIO_read>
}
 398:	08 95       	ret

0000039a <main>:
#include <util/delay.h>


int main(void){
    /* Replace with your application code */
	init();
 39a:	0e 94 a5 01 	call	0x34a	; 0x34a <init>
	uint8_t sum;
    while (1){
		if( button_read(BUTTON_PORT,BUTTON1)== (uint8_t)1 ){
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	81 e4       	ldi	r24, 0x41	; 65
 3a2:	0e 94 3a 00 	call	0x74	; 0x74 <button_read>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	69 f4       	brne	.+26     	; 0x3c4 <main+0x2a>
			LED_on(LED_PORT,LED1);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	82 e4       	ldi	r24, 0x42	; 66
 3ae:	0e 94 c2 01 	call	0x384	; 0x384 <LED_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	2f e3       	ldi	r18, 0x3F	; 63
 3b4:	8d e0       	ldi	r24, 0x0D	; 13
 3b6:	93 e0       	ldi	r25, 0x03	; 3
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x1e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x28>
 3c2:	00 00       	nop
		/*else{
			LED_off(LED_PORT,LED1);
		}*/

		
		if( button_read(BUTTON_PORT,BUTTON2)==(uint8_t)1 ){
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 3a 00 	call	0x74	; 0x74 <button_read>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	69 f4       	brne	.+26     	; 0x3ea <main+0x50>
			LED_on(LED_PORT,LED2);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	82 e4       	ldi	r24, 0x42	; 66
 3d4:	0e 94 c2 01 	call	0x384	; 0x384 <LED_on>
 3d8:	2f e3       	ldi	r18, 0x3F	; 63
 3da:	8d e0       	ldi	r24, 0x0D	; 13
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x44>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x4e>
 3e8:	00 00       	nop
		}
		/*else{
			LED_off(LED_PORT,LED2);
		}*/
		
		if( button_read(BUTTON_PORT,BUTTON3)==(uint8_t)1 ){
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	81 e4       	ldi	r24, 0x41	; 65
 3ee:	0e 94 3a 00 	call	0x74	; 0x74 <button_read>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	69 f4       	brne	.+26     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			LED_on(LED_PORT,LED3);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	82 e4       	ldi	r24, 0x42	; 66
 3fa:	0e 94 c2 01 	call	0x384	; 0x384 <LED_on>
 3fe:	2f e3       	ldi	r18, 0x3F	; 63
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	93 e0       	ldi	r25, 0x03	; 3
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		}
		/*else{
			LED_off(LED_PORT,LED3);
		}*/
		
		sum = LED_state(LED_PORT,LED1) + LED_state(LED_PORT,LED2)+LED_state(LED_PORT,LED3);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	82 e4       	ldi	r24, 0x42	; 66
 414:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 418:	c8 2f       	mov	r28, r24
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	82 e4       	ldi	r24, 0x42	; 66
 41e:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 422:	c8 0f       	add	r28, r24
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 42c:	c8 0f       	add	r28, r24
		
		if(LED_state(LED_PORT,LED1) || LED_state(LED_PORT,LED2) || LED_state(LED_PORT,LED3) /* sum>0*/ ){
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	82 e4       	ldi	r24, 0x42	; 66
 432:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 436:	81 11       	cpse	r24, r1
 438:	0d c0       	rjmp	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	82 e4       	ldi	r24, 0x42	; 66
 43e:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 442:	81 11       	cpse	r24, r1
 444:	07 c0       	rjmp	.+14     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 446:	62 e0       	ldi	r22, 0x02	; 2
 448:	82 e4       	ldi	r24, 0x42	; 66
 44a:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 44e:	88 23       	and	r24, r24
 450:	09 f4       	brne	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 452:	a5 cf       	rjmp	.-182    	; 0x39e <main+0x4>
			
			if(sum==1){
 454:	c1 30       	cpi	r28, 0x01	; 1
 456:	51 f4       	brne	.+20     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 458:	2f e1       	ldi	r18, 0x1F	; 31
 45a:	81 ea       	ldi	r24, 0xA1	; 161
 45c:	97 e0       	ldi	r25, 0x07	; 7
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	17 c0       	rjmp	.+46     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
				_delay_ms(2500);
			}
			else if(sum==2){
 46c:	c2 30       	cpi	r28, 0x02	; 2
 46e:	51 f4       	brne	.+20     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 470:	2f ed       	ldi	r18, 0xDF	; 223
 472:	83 e9       	ldi	r24, 0x93	; 147
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
 482:	0b c0       	rjmp	.+22     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
				_delay_ms(1500);
			}
			else if(sum==3){
 484:	c3 30       	cpi	r28, 0x03	; 3
 486:	49 f4       	brne	.+18     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 488:	2f e9       	ldi	r18, 0x9F	; 159
 48a:	86 e8       	ldi	r24, 0x86	; 134
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 498:	00 00       	nop
				_delay_ms(500);
			}
			/*_delay_ms(1000);*/
			
			if( LED_state(LED_PORT,LED1) == 1){
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	82 e4       	ldi	r24, 0x42	; 66
 49e:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	21 f4       	brne	.+8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
				LED_off(LED_PORT,LED1);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	82 e4       	ldi	r24, 0x42	; 66
 4aa:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_off>
			}
			if(LED_state(LED_PORT,LED2) == 1){
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	82 e4       	ldi	r24, 0x42	; 66
 4b2:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				LED_off(LED_PORT,LED2);
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	82 e4       	ldi	r24, 0x42	; 66
 4be:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_off>
			}
			
			if(LED_state(LED_PORT,LED3) == 1){
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	82 e4       	ldi	r24, 0x42	; 66
 4c6:	0e 94 ca 01 	call	0x394	; 0x394 <LED_state>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	67 cf       	rjmp	.-306    	; 0x39e <main+0x4>
				LED_off(LED_PORT,LED3);
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	82 e4       	ldi	r24, 0x42	; 66
 4d4:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_off>
 4d8:	62 cf       	rjmp	.-316    	; 0x39e <main+0x4>

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
